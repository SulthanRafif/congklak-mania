/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package congklak;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Random;
import java.util.Set;
import javax.swing.ImageIcon;
import javax.swing.Timer;
import javax.swing.JOptionPane;

/**
 *
 * @author Sulthan Rafif
 */
public class Congklak extends javax.swing.JFrame {
    
    
    private int currentPlayer;
    private int sizeHome1, sizeHome2, sizeHome3, sizeHome4, sizeHome5,
            sizeAway1, sizeAway2, sizeAway3, sizeAway4, sizeAway5;
    private boolean statusHome1, statusHome2, statusHome3, statusHome4, statusHome5,
            statusAway1, statusAway2, statusAway3, statusAway4, statusAway5,
            statusScoreHome, statusScoreAway;
    private String kirimHome1="home1",kirimHome2="home2",kirimHome3="home3",kirimHome4="home4",kirimHome5="home5",
                    kirimAway1="away1",kirimAway2="away2",kirimAway3="away3",kirimAway4="away4",kirimAway5="away5";
    private int onHand;
    private int scoreHome, scoreAway;
    private int statusku=0;

    /**
     * Creates new form Congklak
     */
    
    
    
    
    public Congklak() {
        initComponents();
        sizeAway1 = 5;
        sizeAway2 = 5;
        sizeAway3 = 5;
        sizeAway4 = 5;
        sizeAway5 = 5;
        sizeHome1 = 5;
        sizeHome2 = 5;
        sizeHome3 = 5;
        sizeHome4 = 5;
        sizeHome5 = 5;
        scoreHome = 0;
        scoreAway = 0;
        setTrue();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jOptionPane1 = new javax.swing.JOptionPane();
        home1 = new javax.swing.JButton();
        home2 = new javax.swing.JButton();
        home3 = new javax.swing.JButton();
        home4 = new javax.swing.JButton();
        home5 = new javax.swing.JButton();
        away3 = new javax.swing.JButton();
        away4 = new javax.swing.JButton();
        away5 = new javax.swing.JButton();
        away2 = new javax.swing.JButton();
        away1 = new javax.swing.JButton();
        homeScore = new javax.swing.JLabel();
        awayScore = new javax.swing.JLabel();
        buttonSuit = new javax.swing.JButton();
        textPlayer = new javax.swing.JLabel();
        buttonRestart = new javax.swing.JButton();
        nextPlayer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        home1.setText("5");
        home1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                home1ActionPerformed(evt);
            }
        });

        home2.setText("5");
        home2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                home2ActionPerformed(evt);
            }
        });

        home3.setText("5");
        home3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                home3ActionPerformed(evt);
            }
        });

        home4.setText("5");
        home4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                home4ActionPerformed(evt);
            }
        });

        home5.setText("5");
        home5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                home5ActionPerformed(evt);
            }
        });

        away3.setText("5");
        away3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                away3ActionPerformed(evt);
            }
        });

        away4.setText("5");
        away4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                away4ActionPerformed(evt);
            }
        });

        away5.setText("5");
        away5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                away5ActionPerformed(evt);
            }
        });

        away2.setText("5");
        away2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                away2ActionPerformed(evt);
            }
        });

        away1.setText("5");
        away1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                away1ActionPerformed(evt);
            }
        });

        homeScore.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        homeScore.setText("0");

        awayScore.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        awayScore.setText("0");

        buttonSuit.setText("Suit");
        buttonSuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSuitActionPerformed(evt);
            }
        });

        buttonRestart.setText("Restart");
        buttonRestart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRestartActionPerformed(evt);
            }
        });

        nextPlayer.setText("next player");
        nextPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextPlayerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 100, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(away1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(away2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(away3, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(away4, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(away5, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(home1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(home2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(home3, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(home4, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(home5, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 101, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(awayScore)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(homeScore))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonSuit, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textPlayer)
                        .addGap(134, 134, 134)
                        .addComponent(nextPlayer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonRestart, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(away1)
                    .addComponent(away2)
                    .addComponent(away3)
                    .addComponent(away4)
                    .addComponent(away5))
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(homeScore)
                    .addComponent(awayScore))
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(home1)
                    .addComponent(home2)
                    .addComponent(home3)
                    .addComponent(home4)
                    .addComponent(home5))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSuit)
                    .addComponent(textPlayer)
                    .addComponent(buttonRestart)
                    .addComponent(nextPlayer)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setTrue() {
        statusAway1 = true;
        statusAway2 = true;
        statusAway3 = true;
        statusAway4 = true;
        statusAway5 = true;
        statusHome1 = true;
        statusHome2 = true;
        statusHome3 = true;
        statusHome4 = true;
        statusHome5 = true;
        statusScoreAway = true;
        statusScoreHome = true;
    }
    
    public void kirim(String klue) {
        try{
            Socket cl=new Socket("192.168.137.127", 12345);
            DataOutputStream dos=new DataOutputStream(cl.getOutputStream());
            dos.writeBytes(klue);
            cl.close();
        }catch (IOException e){
//            System.out.println("salah");
        }
    }
    
    public void terima() {
        try {
            ServerSocket ss=new ServerSocket(12345);
            Socket sk=ss.accept();
            BufferedReader br=new BufferedReader(new InputStreamReader(sk.getInputStream()));
            String line = br.readLine();
            System.out.println(line);
            if(line.equals("home1")){
//            System.out.println("terima fungsi home 1");
                this.home1ActionPerformed(null);
            }else if(line.equals("home2")){
                this.home2ActionPerformed(null);
            }else if(line.equals("home3")){
                this.home3ActionPerformed(null);
            }else if(line.equals("home4")){
                this.home4ActionPerformed(null);
            }else if(line.equals("home5")){
                this.home5ActionPerformed(null);
            }else if(line.equals("away1")){
                this.away1ActionPerformed(null);
            }else if(line.equals("away2")){
                this.away2ActionPerformed(null);
            }else if(line.equals("away3")){
                this.away3ActionPerformed(null);
            }else if(line.equals("away4")){
                this.away4ActionPerformed(null);
            }else if(line.equals("away5")){
                this.away5ActionPerformed(null);
            }
            sk.close();
            ss.close();
            System.out.println("akhir");
        } catch (Exception e) {

        }
    }
    
    private void winPlayer(){
        home1.setEnabled(false);
        home2.setEnabled(false);
        home3.setEnabled(false);
        home4.setEnabled(false);
        home5.setEnabled(false);
        away1.setEnabled(false);
        away2.setEnabled(false);
        away3.setEnabled(false);
        away4.setEnabled(false);
        away5.setEnabled(false);
        this.buttonSuit.setEnabled(false);
        this.nextPlayer.setEnabled(false);
    }
    
    private void setDisableButton() {
        away1.setEnabled(false);
        away2.setEnabled(false);
        away3.setEnabled(false);
        away4.setEnabled(false);
        away5.setEnabled(false);
        home1.setEnabled(false);
        home2.setEnabled(false);
        home3.setEnabled(false);
        home4.setEnabled(false);
        home5.setEnabled(false);
        buttonSuit.setEnabled(false);
        nextPlayer.setEnabled(false);
        buttonRestart.setEnabled(false);
    }
    
   private void setEnableButtonAway() {
        if(sizeAway1==0){
            away1.setEnabled(false);
        }else{
            away1.setEnabled(true);
        }
        if(sizeAway2==0){
            away2.setEnabled(false);
        }else{
            away2.setEnabled(true);
        }
        if(sizeAway3==0){
            away3.setEnabled(false);
        }else{
            away3.setEnabled(true);
        }
        if(sizeAway4==0){
            away4.setEnabled(false);
        }else{
            away4.setEnabled(true);
        }
        if(sizeAway5==0){
            away5.setEnabled(false);
        }else{
            away5.setEnabled(true);
        }
//        away1.setEnabled(true);
//        away2.setEnabled(true);
//        away3.setEnabled(true);
//        away4.setEnabled(true);
//        away5.setEnabled(true);
        home1.setEnabled(false);
        home2.setEnabled(false);
        home3.setEnabled(false);
        home4.setEnabled(false);
        home5.setEnabled(false);
    }
    
    private void setEnableButtonHome() {
        if(sizeHome1==0){
            home1.setEnabled(false);
        }else{
            home1.setEnabled(true);
        }
        if(sizeHome2==0){
            home2.setEnabled(false);
        }else{
            home2.setEnabled(true);
        }
        if(sizeHome3==0){
            home3.setEnabled(false);
        }else{
            home3.setEnabled(true);
        }
        if(sizeHome4==0){
            home4.setEnabled(false);
        }else{
            home4.setEnabled(true);
        }
        if(sizeHome5==0){
            home5.setEnabled(false);
        }else{
            home5.setEnabled(true);
        }
        away1.setEnabled(false);
        away2.setEnabled(false);
        away3.setEnabled(false);
        away4.setEnabled(false);
        away5.setEnabled(false);
//        home1.setEnabled(true);
//        home2.setEnabled(true);
//        home3.setEnabled(true);
//        home4.setEnabled(true);
//        home5.setEnabled(true);
    }
    
    private void runHome() {
        if (onHand != 0) {
            if (statusHome1 == true) {
                sizeHome1++;
                onHand--;
                home1.setText(String.valueOf(sizeHome1));
                textPlayer.setText(String.valueOf(onHand));
                statusHome1 = false;
                if (onHand == 0 && sizeHome1 > 1) {
                    statusHome1 = false;
                    onHand = sizeHome1;
                    sizeHome1 = 0;
                    home1.setText(String.valueOf(sizeHome1));
                    textPlayer.setText(String.valueOf(onHand));
                } else if (onHand == 0 && sizeHome1 == 1) {
                    onHand = sizeAway1;
                    scoreHome = scoreHome + onHand;
                    homeScore.setText(String.valueOf(scoreHome));
                    onHand = 0;
                    sizeAway1 = 0;
                    away1.setText(String.valueOf(sizeAway1));
                  if((sizeHome1 == 0 && sizeHome2 == 0 && sizeHome3 == 0 && sizeHome4 == 0 && sizeHome5 == 0) || (sizeAway1 == 0 && sizeAway2 == 0 && sizeAway3 == 0 && sizeAway4 == 0 && sizeAway5 == 0)){
                        winPlayer();
                        if(scoreAway>scoreHome){
                            this.jOptionPane1.showMessageDialog(null, "Player 2 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }else{
                            this.jOptionPane1.showMessageDialog(null, "Player 1 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }
                    }else { 
                        textPlayer.setText("Giliran player 2");
                        nextPlayer.setEnabled(true);
                        buttonRestart.setEnabled(true);
                    }
                    
//                    timerHome(0);
                } 
            } else if (statusHome2 == true) {
                sizeHome2++;
                onHand--;
                home2.setText(String.valueOf(sizeHome2));
                textPlayer.setText(String.valueOf(onHand));
                statusHome2 = false;
                if (onHand == 0 && sizeHome2 > 1) {
                    statusHome2 = false;
                    onHand = sizeHome2;
                    sizeHome2 = 0;
                    home2.setText(String.valueOf(sizeHome2));
                    textPlayer.setText(String.valueOf(onHand));
                } else if (onHand == 0 && sizeHome2 == 1) {
                    onHand = sizeAway2;
                    scoreHome = scoreHome + onHand;
                    homeScore.setText(String.valueOf(scoreHome));
                    onHand = 0;
                    sizeAway2 = 0;
                    away2.setText(String.valueOf(sizeAway2));
                   if((sizeHome1 == 0 && sizeHome2 == 0 && sizeHome3 == 0 && sizeHome4 == 0 && sizeHome5 == 0) || (sizeAway1 == 0 && sizeAway2 == 0 && sizeAway3 == 0 && sizeAway4 == 0 && sizeAway5 == 0)){
                        winPlayer();
                        if(scoreAway>scoreHome){
                            this.jOptionPane1.showMessageDialog(null, "Player 2 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }else{
                            this.jOptionPane1.showMessageDialog(null, "Player 1 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }
                    }else { 
                        textPlayer.setText("Giliran player 2");
                        nextPlayer.setEnabled(true);
                        buttonRestart.setEnabled(true);
                    }
//                    timerHome(0);
                } 
            } else if (statusHome3 == true) {
                sizeHome3++;
                onHand--;
                home3.setText(String.valueOf(sizeHome3));
                textPlayer.setText(String.valueOf(onHand));
                statusHome3 = false;
                if (onHand == 0 && sizeHome3 > 1) {
                    statusHome3 = false;
                    onHand = sizeHome3;
                    sizeHome3 = 0;
                    home3.setText(String.valueOf(sizeHome3));
                    textPlayer.setText(String.valueOf(onHand));
                } else if (onHand == 0 && sizeHome3 == 1) {
                    onHand = sizeAway3;
                    scoreHome = scoreHome + onHand;
                    homeScore.setText(String.valueOf(scoreHome));
                    onHand = 0;
                    sizeAway3 = 0;
                    away3.setText(String.valueOf(sizeAway3));
                   if((sizeHome1 == 0 && sizeHome2 == 0 && sizeHome3 == 0 && sizeHome4 == 0 && sizeHome5 == 0) || (sizeAway1 == 0 && sizeAway2 == 0 && sizeAway3 == 0 && sizeAway4 == 0 && sizeAway5 == 0)){
                        winPlayer();
                        if(scoreAway>scoreHome){
                            this.jOptionPane1.showMessageDialog(null, "Player 2 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }else{
                            this.jOptionPane1.showMessageDialog(null, "Player 1 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }
                    }else { 
                        textPlayer.setText("Giliran player 2");
                        nextPlayer.setEnabled(true);
                        buttonRestart.setEnabled(true);
                    }
//                    timerHome(0);
                } 
            } else if (statusHome4 == true) {
                sizeHome4++;
                onHand--;
                home4.setText(String.valueOf(sizeHome4));
                textPlayer.setText(String.valueOf(onHand));
                statusHome4 = false;
                if (onHand == 0 && sizeHome4 > 1) {
                    statusHome4 = false;
                    onHand = sizeHome4;
                    sizeHome4 = 0;
                    home4.setText(String.valueOf(sizeHome4));
                    textPlayer.setText(String.valueOf(onHand));
                } else if (onHand == 0 && sizeHome4 == 1) {
                    onHand = sizeAway4;
                    scoreHome = scoreHome + onHand;
                    homeScore.setText(String.valueOf(scoreHome));
                    onHand = 0;
                    sizeAway4 = 0;
                    away4.setText(String.valueOf(sizeAway4));
                   if((sizeHome1 == 0 && sizeHome2 == 0 && sizeHome3 == 0 && sizeHome4 == 0 && sizeHome5 == 0) || (sizeAway1 == 0 && sizeAway2 == 0 && sizeAway3 == 0 && sizeAway4 == 0 && sizeAway5 == 0)){
                        winPlayer();
                        if(scoreAway>scoreHome){
                            this.jOptionPane1.showMessageDialog(null, "Player 2 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }else{
                            this.jOptionPane1.showMessageDialog(null, "Player 1 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }
                    }else { 
                        textPlayer.setText("Giliran player 2");
                        nextPlayer.setEnabled(true);
                        buttonRestart.setEnabled(true);
                    }
//                    timerHome(0);
                }
            } else if (statusHome5 == true) {
                sizeHome5++;
                onHand--;
                home5.setText(String.valueOf(sizeHome5));
                textPlayer.setText(String.valueOf(onHand));
                statusHome5 = false;
                if (onHand == 0 && sizeHome5 > 1) {
                    statusHome5 = false;
                    onHand = sizeHome5;
                    sizeHome5 = 0;
                    home5.setText(String.valueOf(sizeHome5));
                    textPlayer.setText(String.valueOf(onHand));
                } else if (onHand == 0 && sizeHome5 == 1) {
                    onHand = sizeAway5;
                    scoreHome = scoreHome + onHand;
                    homeScore.setText(String.valueOf(scoreHome));
                    onHand = 0;
                    sizeAway5 = 0;
                    away5.setText(String.valueOf(sizeAway5));
                  if((sizeHome1 == 0 && sizeHome2 == 0 && sizeHome3 == 0 && sizeHome4 == 0 && sizeHome5 == 0) || (sizeAway1 == 0 && sizeAway2 == 0 && sizeAway3 == 0 && sizeAway4 == 0 && sizeAway5 == 0)){
                        winPlayer();
                        if(scoreAway>scoreHome){
                            this.jOptionPane1.showMessageDialog(null, "Player 2 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }else{
                            this.jOptionPane1.showMessageDialog(null, "Player 1 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }
                    }else { 
                        textPlayer.setText("Giliran player 2");
                        nextPlayer.setEnabled(true);
                        buttonRestart.setEnabled(true);
                    }
//                    timerHome(0);
                } 
            } else if (statusScoreHome == true) {
                scoreHome++;
                onHand--;
                homeScore.setText(String.valueOf(scoreHome));
                textPlayer.setText(String.valueOf(onHand));
                statusScoreHome = false;
                if (onHand == 0) {
                   if((sizeHome1 == 0 && sizeHome2 == 0 && sizeHome3 == 0 && sizeHome4 == 0 && sizeHome5 == 0) || (sizeAway1 == 0 && sizeAway2 == 0 && sizeAway3 == 0 && sizeAway4 == 0 && sizeAway5 == 0)){
                        winPlayer();
                        if(scoreAway>scoreHome){
                            this.jOptionPane1.showMessageDialog(null, "Player 2 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }else{
                            this.jOptionPane1.showMessageDialog(null, "Player 1 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }
                    }else { 
                        textPlayer.setText("Giliran player 2");
                        nextPlayer.setEnabled(true);
                        buttonRestart.setEnabled(true);
                    }
                }
            } else if (statusAway5 == true) {
                sizeAway5++;
                onHand--;
                away5.setText(String.valueOf(sizeAway5));
                textPlayer.setText(String.valueOf(onHand));
                statusAway5 = false;
                if (onHand == 0 && sizeAway5 > 1) {
                    statusAway5 = false;
                    onHand = sizeAway5;
                    sizeAway5 = 0;
                    away5.setText(String.valueOf(sizeAway5));
                    textPlayer.setText(String.valueOf(onHand));
                } else if (onHand == 0 && sizeAway5 == 1) {
                   if((sizeHome1 == 0 && sizeHome2 == 0 && sizeHome3 == 0 && sizeHome4 == 0 && sizeHome5 == 0) || (sizeAway1 == 0 && sizeAway2 == 0 && sizeAway3 == 0 && sizeAway4 == 0 && sizeAway5 == 0)){
                        winPlayer();
                        if(scoreAway>scoreHome){
                            this.jOptionPane1.showMessageDialog(null, "Player 2 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }else{
                            this.jOptionPane1.showMessageDialog(null, "Player 1 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }
                    }else { 
                        textPlayer.setText("Giliran player 2");
                        nextPlayer.setEnabled(true);
                        buttonRestart.setEnabled(true);
                    }
//                    timerHome(0);
                }
            } else if (statusAway4 == true) {
                sizeAway4++;
                onHand--;
                away4.setText(String.valueOf(sizeAway4));
                textPlayer.setText(String.valueOf(onHand));
                statusAway4 = false;
                if (onHand == 0 && sizeAway4 > 1) {
                    statusAway4 = false;
                    onHand = sizeAway4;
                    sizeAway4 = 0;
                    away4.setText(String.valueOf(sizeAway4));
                    textPlayer.setText(String.valueOf(onHand));
                } else if (onHand == 0 && sizeAway4 == 1) {
                   if((sizeHome1 == 0 && sizeHome2 == 0 && sizeHome3 == 0 && sizeHome4 == 0 && sizeHome5 == 0) || (sizeAway1 == 0 && sizeAway2 == 0 && sizeAway3 == 0 && sizeAway4 == 0 && sizeAway5 == 0)){
                        winPlayer();
                        if(scoreAway>scoreHome){
                            this.jOptionPane1.showMessageDialog(null, "Player 2 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }else{
                            this.jOptionPane1.showMessageDialog(null, "Player 1 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }
                    }else { 
                        textPlayer.setText("Giliran player 2");
                        nextPlayer.setEnabled(true);
                        buttonRestart.setEnabled(true);
                    }
//                    timerHome(0);
                }
            } else if (statusAway3 == true) {
                sizeAway3++;
                onHand--;
                away3.setText(String.valueOf(sizeAway3));
                textPlayer.setText(String.valueOf(onHand));
                statusAway3 = false;
                if (onHand == 0 && sizeAway3 > 1) {
                    statusAway3 = false;
                    onHand = sizeAway3;
                    sizeAway3 = 0;
                    away3.setText(String.valueOf(sizeAway3));
                    textPlayer.setText(String.valueOf(onHand));
                } else if (onHand == 0 && sizeAway3 == 1) {
                   if((sizeHome1 == 0 && sizeHome2 == 0 && sizeHome3 == 0 && sizeHome4 == 0 && sizeHome5 == 0) || (sizeAway1 == 0 && sizeAway2 == 0 && sizeAway3 == 0 && sizeAway4 == 0 && sizeAway5 == 0)){
                        winPlayer();
                        if(scoreAway>scoreHome){
                            this.jOptionPane1.showMessageDialog(null, "Player 2 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }else{
                            this.jOptionPane1.showMessageDialog(null, "Player 1 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }
                    }else { 
                        textPlayer.setText("Giliran player 2");
                        nextPlayer.setEnabled(true);
                        buttonRestart.setEnabled(true);
                    }
//                    timerHome(0);
                }
            } else if (statusAway2 == true) {
                sizeAway2++;
                onHand--;
                away2.setText(String.valueOf(sizeAway2));
                textPlayer.setText(String.valueOf(onHand));
                statusAway2 = false;
                if (onHand == 0 && sizeAway2 > 1) {
                    statusAway2 = false;
                    onHand = sizeAway2;
                    sizeAway2 = 0;
                    away2.setText(String.valueOf(sizeAway2));
                    textPlayer.setText(String.valueOf(onHand));
                } else if (onHand == 0 && sizeAway2 == 1) {
                   if((sizeHome1 == 0 && sizeHome2 == 0 && sizeHome3 == 0 && sizeHome4 == 0 && sizeHome5 == 0) || (sizeAway1 == 0 && sizeAway2 == 0 && sizeAway3 == 0 && sizeAway4 == 0 && sizeAway5 == 0)){
                        winPlayer();
                        if(scoreAway>scoreHome){
                            this.jOptionPane1.showMessageDialog(null, "Player 2 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }else{
                            this.jOptionPane1.showMessageDialog(null, "Player 1 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }
                    }else { 
                        textPlayer.setText("Giliran player 2");
                        nextPlayer.setEnabled(true);
                        buttonRestart.setEnabled(true);
                    }
//                    timerHome(0);
                }
            } else if (statusAway1 == true) {
                sizeAway1++;
                onHand--;
                away1.setText(String.valueOf(sizeAway1));
                textPlayer.setText(String.valueOf(onHand));
                statusAway1 = false;
                if (onHand == 0 && sizeAway1 > 1) {
                    statusAway1 = false;
                    onHand = sizeAway1;
                    sizeAway1 = 0;
                    away1.setText(String.valueOf(sizeAway1));
                    textPlayer.setText(String.valueOf(onHand));
                } else if (onHand == 0 && sizeAway1 == 1) {
                   if((sizeHome1 == 0 && sizeHome2 == 0 && sizeHome3 == 0 && sizeHome4 == 0 && sizeHome5 == 0) || (sizeAway1 == 0 && sizeAway2 == 0 && sizeAway3 == 0 && sizeAway4 == 0 && sizeAway5 == 0)){
                        winPlayer();
                        if(scoreAway>scoreHome){
                            this.jOptionPane1.showMessageDialog(null, "Player 2 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }else{
                            this.jOptionPane1.showMessageDialog(null, "Player 1 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }
                    }else { 
                        textPlayer.setText("Giliran player 2");
                        nextPlayer.setEnabled(true);
                        buttonRestart.setEnabled(true);
                    }
//                    timerHome(0);
                }
            } 
//            else if (statusScoreAway == true) {
//                scoreAway++;
//                onHand--;
//                awayScore.setText(String.valueOf(scoreAway));
//                textPlayer.setText(String.valueOf(onHand));
//                statusScoreAway = false;
//            }
            else {
                setTrue();
            }
        }
    }
    
    private void runAway() {
        if (onHand != 0) {
            if (statusAway5 == true) {
                sizeAway5++;
                onHand--;
                away5.setText(String.valueOf(sizeAway5));
                textPlayer.setText(String.valueOf(onHand));
                statusAway5 = false;
                if (onHand == 0 && sizeAway5 > 1) {
                    statusAway5 = false;
                    onHand = sizeAway5;
                    sizeAway5 = 0;
                    away5.setText(String.valueOf(sizeAway5));
                    textPlayer.setText(String.valueOf(onHand));
                } else if (onHand == 0 && sizeAway5 == 1) {
                    onHand = sizeHome5;
                    scoreAway = scoreAway + onHand;
                    homeScore.setText(String.valueOf(scoreHome));
                    onHand = 0;
                    sizeHome5 = 0;
                    home5.setText(String.valueOf(sizeHome5));
                  if((sizeHome1 == 0 && sizeHome2 == 0 && sizeHome3 == 0 && sizeHome4 == 0 && sizeHome5 == 0) || (sizeAway1 == 0 && sizeAway2 == 0 && sizeAway3 == 0 && sizeAway4 == 0 && sizeAway5 == 0)){
                        winPlayer();
                        if(scoreAway>scoreHome){
                            this.jOptionPane1.showMessageDialog(null, "Player 2 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }else{
                            this.jOptionPane1.showMessageDialog(null, "Player 1 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }
                    }else { 
                        textPlayer.setText("Giliran player 1");
                        nextPlayer.setEnabled(true);
                        buttonRestart.setEnabled(true);
                    }
//                    timerAway(0);
                } 
            } else if (statusAway4 == true) {
                sizeAway4++;
                onHand--;
                away4.setText(String.valueOf(sizeAway4));
                textPlayer.setText(String.valueOf(onHand));
                statusAway4 = false;
                if (onHand == 0 && sizeAway4 > 1) {
                    statusAway4 = false;
                    onHand = sizeAway4;
                    sizeAway4 = 0;
                    away4.setText(String.valueOf(sizeAway4));
                    textPlayer.setText(String.valueOf(onHand));
                } else if (onHand == 0 && sizeAway4 == 1) {
                    onHand = sizeHome4;
                    scoreAway = scoreAway + onHand;
                    awayScore.setText(String.valueOf(scoreAway));
                    onHand = 0;
                    sizeHome4 = 0;
                    home4.setText(String.valueOf(sizeHome4));
                  if((sizeHome1 == 0 && sizeHome2 == 0 && sizeHome3 == 0 && sizeHome4 == 0 && sizeHome5 == 0) || (sizeAway1 == 0 && sizeAway2 == 0 && sizeAway3 == 0 && sizeAway4 == 0 && sizeAway5 == 0)){
                        winPlayer();
                        if(scoreAway>scoreHome){
                            this.jOptionPane1.showMessageDialog(null, "Player 2 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }else{
                            this.jOptionPane1.showMessageDialog(null, "Player 1 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }
                    }else { 
                        textPlayer.setText("Giliran player 1");
                        nextPlayer.setEnabled(true);
                        buttonRestart.setEnabled(true);
                    }
//                    timerAway(0);
                } 
            } else if (statusAway3 == true) {
                sizeAway3++;
                onHand--;
                away3.setText(String.valueOf(sizeAway3));
                textPlayer.setText(String.valueOf(onHand));
                statusAway3 = false;
                if (onHand == 0 && sizeAway3 > 1) {
                    statusAway3 = false;
                    onHand = sizeAway3;
                    sizeAway3 = 0;
                    away3.setText(String.valueOf(sizeAway3));
                    textPlayer.setText(String.valueOf(onHand));
                } else if (onHand == 0 && sizeAway3 == 1) {
                    onHand = sizeHome3;
                    scoreAway = scoreAway + onHand;
                    awayScore.setText(String.valueOf(scoreAway));
                    onHand = 0;
                    sizeHome3 = 0;
                    home3.setText(String.valueOf(sizeHome3));
                  if((sizeHome1 == 0 && sizeHome2 == 0 && sizeHome3 == 0 && sizeHome4 == 0 && sizeHome5 == 0) || (sizeAway1 == 0 && sizeAway2 == 0 && sizeAway3 == 0 && sizeAway4 == 0 && sizeAway5 == 0)){
                        winPlayer();
                        if(scoreAway>scoreHome){
                            this.jOptionPane1.showMessageDialog(null, "Player 2 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }else{
                            this.jOptionPane1.showMessageDialog(null, "Player 1 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }
                    }else { 
                        textPlayer.setText("Giliran player 1");
                        nextPlayer.setEnabled(true);
                        buttonRestart.setEnabled(true);
                    }
//                    timerAway(0);
                } 
            } else if (statusAway2 == true) {
                sizeAway2++;
                onHand--;
                away2.setText(String.valueOf(sizeAway2));
                textPlayer.setText(String.valueOf(onHand));
                statusAway2 = false;
                if (onHand == 0 && sizeAway2 > 1) {
                    statusAway2 = false;
                    onHand = sizeAway2;
                    sizeAway2 = 0;
                    away2.setText(String.valueOf(sizeAway2));
                    textPlayer.setText(String.valueOf(onHand));
                } else if (onHand == 0 && sizeAway2 == 1) {
                    onHand = sizeHome2;
                    scoreAway = scoreAway + onHand;
                    awayScore.setText(String.valueOf(scoreAway));
                    onHand = 0;
                    sizeHome2 = 0;
                    home2.setText(String.valueOf(sizeHome2));
                  if((sizeHome1 == 0 && sizeHome2 == 0 && sizeHome3 == 0 && sizeHome4 == 0 && sizeHome5 == 0) || (sizeAway1 == 0 && sizeAway2 == 0 && sizeAway3 == 0 && sizeAway4 == 0 && sizeAway5 == 0)){
                        winPlayer();
                        if(scoreAway>scoreHome){
                            this.jOptionPane1.showMessageDialog(null, "Player 2 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }else{
                            this.jOptionPane1.showMessageDialog(null, "Player 1 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }
                    }else { 
                        textPlayer.setText("Giliran player 1");
                        nextPlayer.setEnabled(true);
                        buttonRestart.setEnabled(true);
                    }
//                    timerAway(0);
                }
            } else if (statusAway1 == true) {
                sizeAway1++;
                onHand--;
                away1.setText(String.valueOf(sizeAway1));
                textPlayer.setText(String.valueOf(onHand));
                statusAway1 = false;
                if (onHand == 0 && sizeAway1 > 1) {
                    statusAway1 = false;
                    onHand = sizeAway1;
                    sizeAway1 = 0;
                    away1.setText(String.valueOf(sizeAway1));
                    textPlayer.setText(String.valueOf(onHand));
                } else if (onHand == 0 && sizeAway1 == 1) {
                    onHand = sizeHome1;
                    scoreAway = scoreAway + onHand;
                    awayScore.setText(String.valueOf(scoreAway));
                    onHand = 0;
                    sizeHome1 = 0;
                    home1.setText(String.valueOf(sizeHome1));
                   if((sizeHome1 == 0 && sizeHome2 == 0 && sizeHome3 == 0 && sizeHome4 == 0 && sizeHome5 == 0) || (sizeAway1 == 0 && sizeAway2 == 0 && sizeAway3 == 0 && sizeAway4 == 0 && sizeAway5 == 0)){
                        winPlayer();
                        if(scoreAway>scoreHome){
                            this.jOptionPane1.showMessageDialog(null, "Player 2 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }else{
                            this.jOptionPane1.showMessageDialog(null, "Player 1 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }
                    }else { 
                        textPlayer.setText("Giliran player 1");
                        nextPlayer.setEnabled(true);
                        buttonRestart.setEnabled(true);
                    }
//                    timerAway(0);
                } 
            } else if (statusScoreAway == true) {
                scoreAway++;
                onHand--;
                awayScore.setText(String.valueOf(scoreAway));
                textPlayer.setText(String.valueOf(onHand));
                statusScoreAway = false;
                if (onHand == 0) {
                   if((sizeHome1 == 0 && sizeHome2 == 0 && sizeHome3 == 0 && sizeHome4 == 0 && sizeHome5 == 0) || (sizeAway1 == 0 && sizeAway2 == 0 && sizeAway3 == 0 && sizeAway4 == 0 && sizeAway5 == 0)){
                        winPlayer();
                        if(scoreAway>scoreHome){
                            this.jOptionPane1.showMessageDialog(null, "Player 2 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }else{
                            this.jOptionPane1.showMessageDialog(null, "Player 1 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }
                    }else { 
                        textPlayer.setText("Giliran player 1");
                        nextPlayer.setEnabled(true);
                        buttonRestart.setEnabled(true);
                    }
                }
            } else if (statusHome1 == true) {
                sizeHome1++;
                onHand--;
                home1.setText(String.valueOf(sizeHome1));
                textPlayer.setText(String.valueOf(onHand));
                statusHome1 = false;
                if (onHand == 0 && sizeHome1 > 1) {
                    statusHome1 = false;
                    onHand = sizeHome1;
                    sizeHome1 = 0;
                    home1.setText(String.valueOf(sizeHome1));
                    textPlayer.setText(String.valueOf(onHand));
                } else if (onHand == 0 && sizeHome1 == 1) {
                   if((sizeHome1 == 0 && sizeHome2 == 0 && sizeHome3 == 0 && sizeHome4 == 0 && sizeHome5 == 0) || (sizeAway1 == 0 && sizeAway2 == 0 && sizeAway3 == 0 && sizeAway4 == 0 && sizeAway5 == 0)){
                        winPlayer();
                        if(scoreAway>scoreHome){
                            this.jOptionPane1.showMessageDialog(null, "Player 2 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }else{
                            this.jOptionPane1.showMessageDialog(null, "Player 1 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }
                    }else { 
                        textPlayer.setText("Giliran player 1");
                        nextPlayer.setEnabled(true);
                        buttonRestart.setEnabled(true);
                    }
//                    timerAway(0);
                }
            } else if (statusHome2 == true) {
                sizeHome2++;
                onHand--;
                home2.setText(String.valueOf(sizeHome2));
                textPlayer.setText(String.valueOf(onHand));
                statusHome2 = false;
                if (onHand == 0 && sizeHome2 > 1) {
                    statusHome2 = false;
                    onHand = sizeHome2;
                    sizeHome2 = 0;
                    home2.setText(String.valueOf(sizeHome2));
                    textPlayer.setText(String.valueOf(onHand));
                } else if (onHand == 0 && sizeHome2 == 1) {
                    if((sizeHome1 == 0 && sizeHome2 == 0 && sizeHome3 == 0 && sizeHome4 == 0 && sizeHome5 == 0) || (sizeAway1 == 0 && sizeAway2 == 0 && sizeAway3 == 0 && sizeAway4 == 0 && sizeAway5 == 0)){
                        winPlayer();
                        if(scoreAway>scoreHome){
                            this.jOptionPane1.showMessageDialog(null, "Player 2 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }else{
                            this.jOptionPane1.showMessageDialog(null, "Player 1 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }
                    }else { 
                        textPlayer.setText("Giliran player 1");
                        nextPlayer.setEnabled(true);
                        buttonRestart.setEnabled(true);
                    }
//                    timerAway(0);
                }
            } else if (statusHome3 == true) {
                sizeHome3++;
                onHand--;
                home3.setText(String.valueOf(sizeHome3));
                textPlayer.setText(String.valueOf(onHand));
                statusHome3 = false;
                if (onHand == 0 && sizeHome3 > 1) {
                    statusHome3 = false;
                    onHand = sizeHome3;
                    sizeHome3 = 0;
                    home3.setText(String.valueOf(sizeHome3));
                    textPlayer.setText(String.valueOf(onHand));
                } else if (onHand == 0 && sizeHome3 == 1) {
                  if((sizeHome1 == 0 && sizeHome2 == 0 && sizeHome3 == 0 && sizeHome4 == 0 && sizeHome5 == 0) || (sizeAway1 == 0 && sizeAway2 == 0 && sizeAway3 == 0 && sizeAway4 == 0 && sizeAway5 == 0)){
                        winPlayer();
                        if(scoreAway>scoreHome){
                            this.jOptionPane1.showMessageDialog(null, "Player 2 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }else{
                            this.jOptionPane1.showMessageDialog(null, "Player 1 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }
                    }else { 
                        textPlayer.setText("Giliran player 1");
                        nextPlayer.setEnabled(true);
                        buttonRestart.setEnabled(true);
                    }
//                    timerAway(0);
                }
            } else if (statusHome4 == true) {
                sizeHome4++;
                onHand--;
                home4.setText(String.valueOf(sizeHome4));
                textPlayer.setText(String.valueOf(onHand));
                statusHome4 = false;
                if (onHand == 0 && sizeHome4 > 1) {
                    statusHome4 = false;
                    onHand = sizeHome4;
                    sizeHome4 = 0;
                    home4.setText(String.valueOf(sizeHome4));
                    textPlayer.setText(String.valueOf(onHand));
                } else if (onHand == 0 && sizeHome4 == 1) {
                   if((sizeHome1 == 0 && sizeHome2 == 0 && sizeHome3 == 0 && sizeHome4 == 0 && sizeHome5 == 0) || (sizeAway1 == 0 && sizeAway2 == 0 && sizeAway3 == 0 && sizeAway4 == 0 && sizeAway5 == 0)){
                        winPlayer();
                        if(scoreAway>scoreHome){
                            this.jOptionPane1.showMessageDialog(null, "Player 2 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }else{
                            this.jOptionPane1.showMessageDialog(null, "Player 1 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }
                    }else { 
                        textPlayer.setText("Giliran player 1");
                        nextPlayer.setEnabled(true);
                        buttonRestart.setEnabled(true);
                    }
//                    timerAway(0);
                }
            } else if (statusHome5 == true) {
                sizeHome5++;
                onHand--;
                home5.setText(String.valueOf(sizeHome5));
                textPlayer.setText(String.valueOf(onHand));
                statusHome5 = false;
                if (onHand == 0 && sizeHome5 > 1) {
                    statusHome5 = false;
                    onHand = sizeHome5;
                    sizeHome5 = 0;
                    home5.setText(String.valueOf(sizeHome5));
                    textPlayer.setText(String.valueOf(onHand));
                } else if (onHand == 0 && sizeHome5 == 1) {
                    if((sizeHome1 == 0 && sizeHome2 == 0 && sizeHome3 == 0 && sizeHome4 == 0 && sizeHome5 == 0) || (sizeAway1 == 0 && sizeAway2 == 0 && sizeAway3 == 0 && sizeAway4 == 0 && sizeAway5 == 0)){
                        winPlayer();
                        if(scoreAway>scoreHome){
                            this.jOptionPane1.showMessageDialog(null, "Player 2 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }else{
                            this.jOptionPane1.showMessageDialog(null, "Player 1 menang", "Alert", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                    else { 
                        textPlayer.setText("Giliran player 1");
                        nextPlayer.setEnabled(true);
                        buttonRestart.setEnabled(true);
                    }
//                    timerAway(0);
                }
            } 
//            else if (statusScoreHome == true) {
//                scoreHome++;
//                onHand--;
//                homeScore.setText(String.valueOf(scoreHome));
//                textPlayer.setText(String.valueOf(onHand));
//                statusScoreHome = false;
//            }
            else {
                setTrue();
            }
        }
    }
    
    private void home1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_home1ActionPerformed
        // TODO add your handling code here:
        setTrue();
        statusHome1 = false;
        onHand = sizeHome1;
        sizeHome1 = 0;
        home1.setText(String.valueOf(sizeHome1));
        textPlayer.setText(String.valueOf(onHand));
        setDisableButton();
//        timerHome(1);
        Timer timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                runHome();
            }
        });
        kirim(kirimHome1);
        timer.start();
        buttonRestart.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                timer.stop();
            }
        });
         nextPlayer.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                timer.stop();
            }
        });
        
    }//GEN-LAST:event_home1ActionPerformed

    private void home2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_home2ActionPerformed
        // TODO add your handling code here:
        setTrue();
        statusHome1 = false;
        statusHome2 = false;
        onHand = sizeHome2;
        sizeHome2 = 0;
        home2.setText(String.valueOf(sizeHome2));
        textPlayer.setText(String.valueOf(onHand));
        setDisableButton();
//        timerHome(1);
        Timer timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                runHome();
            }
        });
        kirim(kirimHome2);
        timer.start();
        buttonRestart.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                timer.stop();
            }
        });
      
         nextPlayer.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                timer.stop();
            }
        });
    }//GEN-LAST:event_home2ActionPerformed

    private void home3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_home3ActionPerformed
        // TODO add your handling code here:
        setTrue();
        statusHome1 = false;
        statusHome2 = false;
        statusHome3 = false;
        onHand = sizeHome3;
        sizeHome3 = 0;
        home3.setText(String.valueOf(sizeHome3));
        textPlayer.setText(String.valueOf(onHand));
        setDisableButton();
//        timerHome(1);
        Timer timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                runHome();
            }
        });
        kirim(kirimHome3);
        timer.start();
        buttonRestart.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                timer.stop();
            }
        });
        
         nextPlayer.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                timer.stop();
            }
        });
    }//GEN-LAST:event_home3ActionPerformed

    private void home4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_home4ActionPerformed
        // TODO add your handling code here:
        setTrue();
        statusHome1 = false;
        statusHome2 = false;
        statusHome3 = false;
        statusHome4 = false;
        onHand = sizeHome4;
        sizeHome4 = 0;
        home4.setText(String.valueOf(sizeHome4));
        textPlayer.setText(String.valueOf(onHand));
        setDisableButton();
//        timerHome(1);
        Timer timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                runHome();
            }
        });
        kirim(kirimHome4);
        timer.start();
        buttonRestart.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                timer.stop();
            }
        });
        
         nextPlayer.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                timer.stop();
            }
        });
    }//GEN-LAST:event_home4ActionPerformed

    private void home5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_home5ActionPerformed
        // TODO add your handling code here:
        setTrue();
        statusHome1 = false;
        statusHome2 = false;
        statusHome3 = false;
        statusHome4 = false;
        statusHome5 = false;
        onHand = sizeHome5;
        sizeHome5 = 0;
        home5.setText(String.valueOf(sizeHome5));
        textPlayer.setText(String.valueOf(onHand));
        setDisableButton();
//        timerHome(1);
        Timer timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                runHome();
            }
        });
        kirim(kirimHome5);
        timer.start();
        buttonRestart.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                timer.stop();
            }
        });
        
         nextPlayer.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                timer.stop();
            }
        });
    }//GEN-LAST:event_home5ActionPerformed

    private void away3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_away3ActionPerformed
        // TODO add your handling code here:
        setTrue();
        statusAway5 = false;
        statusAway4 = false;
        statusAway3 = false;
        
        onHand = sizeAway3;
        sizeAway3 = 0;
        away3.setText(String.valueOf(sizeAway3));
        textPlayer.setText(String.valueOf(onHand));
        setDisableButton();
//        timerAway(1);
        Timer timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                runAway();
            }
        });
        kirim(kirimAway3);
        timer.start();
        buttonRestart.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                timer.stop();
            }
        });
        
        
         nextPlayer.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                timer.stop();
            }
        });
    }//GEN-LAST:event_away3ActionPerformed

    private void away4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_away4ActionPerformed
        // TODO add your handling code here:
        setTrue();
        statusAway5 = false;
        statusAway4 = false;
        
        onHand = sizeAway4;
        sizeAway4 = 0;
        away4.setText(String.valueOf(sizeAway4));
        textPlayer.setText(String.valueOf(onHand));
        setDisableButton();
//        timerAway(1);
        Timer timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                runAway();
            }
        });
        kirim(kirimAway4);
        timer.start();
        buttonRestart.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                timer.stop();
            }
        });
        
        
         nextPlayer.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                timer.stop();
            }
        });
    }//GEN-LAST:event_away4ActionPerformed

    private void away5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_away5ActionPerformed
        // TODO add your handling code here:
        setTrue();
        statusAway5 = false;
        
        onHand = sizeAway5;
        sizeAway5 = 0;
        away5.setText(String.valueOf(sizeAway5));
        textPlayer.setText(String.valueOf(onHand));
        setDisableButton();
//        timerAway(1);
        Timer timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                runAway();
            }
        });
        kirim(kirimAway5);
        timer.start();
        buttonRestart.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                timer.stop();
            }
        });
        
        
         nextPlayer.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                timer.stop();
            }
        });
    }//GEN-LAST:event_away5ActionPerformed

    private void away2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_away2ActionPerformed
        // TODO add your handling code here:
        setTrue();
        statusAway5 = false;
        statusAway4 = false;
        statusAway3 = false;
        statusAway2 = false;
        
        onHand = sizeAway2;
        sizeAway2 = 0;
        away2.setText(String.valueOf(sizeAway2));
        textPlayer.setText(String.valueOf(onHand));
        setDisableButton();
//        timerAway(1);
        Timer timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                runAway();
            }
        });
        kirim(kirimAway2);
        timer.start();
        buttonRestart.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                timer.stop();
            }
        });
        
        
         nextPlayer.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                timer.stop();
            }
        });
    }//GEN-LAST:event_away2ActionPerformed

    private void away1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_away1ActionPerformed
        // TODO add your handling code here:
        setTrue();
        statusAway5 = false;
        statusAway4 = false;
        statusAway3 = false;
        statusAway2 = false;
        statusAway1 = false;
        
        onHand = sizeAway1;
        sizeAway1 = 0;
        away1.setText(String.valueOf(sizeAway1));
        textPlayer.setText(String.valueOf(onHand));
        setDisableButton();
//        timerAway(1);
        Timer timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                runAway();
            }
        });
        kirim(kirimAway1);
        timer.start();
        buttonRestart.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                timer.stop();
            }
        });
        
        
         nextPlayer.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                timer.stop();
            }
        });
    }//GEN-LAST:event_away1ActionPerformed

    private void buttonSuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSuitActionPerformed
        // TODO add your handling code here:
        Random random = new Random();
        currentPlayer = random.nextInt(2);
//currentPlayer=0;
        if (currentPlayer == 0) {
            textPlayer.setText("Player 1 Main duluan!");
            away1.setText(String.valueOf(sizeAway1));
            away2.setText(String.valueOf(sizeAway2));
            away3.setText(String.valueOf(sizeAway3));
            away4.setText(String.valueOf(sizeAway4));
            away5.setText(String.valueOf(sizeAway5));
            home1.setText(String.valueOf(sizeHome1));
            home2.setText(String.valueOf(sizeHome2));
            home3.setText(String.valueOf(sizeHome3));
            home4.setText(String.valueOf(sizeHome4));
            home5.setText(String.valueOf(sizeHome5));
            awayScore.setText(String.valueOf(scoreAway));
            homeScore.setText(String.valueOf(scoreHome));
            away1.setEnabled(false);
            away2.setEnabled(false);
            away3.setEnabled(false);
            away4.setEnabled(false);
            away5.setEnabled(false);
            home1.setEnabled(true);
            home2.setEnabled(true);
            home3.setEnabled(true);
            home4.setEnabled(true);
            home5.setEnabled(true);
            
        } else {
            textPlayer.setText("Player 2 Main duluan!");
            away1.setText(String.valueOf(sizeAway1));
            away2.setText(String.valueOf(sizeAway2));
            away3.setText(String.valueOf(sizeAway3));
            away4.setText(String.valueOf(sizeAway4));
            away5.setText(String.valueOf(sizeAway5));
            home1.setText(String.valueOf(sizeHome1));
            home2.setText(String.valueOf(sizeHome2));
            home3.setText(String.valueOf(sizeHome3));
            home4.setText(String.valueOf(sizeHome4));
            home5.setText(String.valueOf(sizeHome5));
            awayScore.setText(String.valueOf(scoreAway));
            homeScore.setText(String.valueOf(scoreHome));
            away1.setEnabled(true);
            away2.setEnabled(true);
            away3.setEnabled(true);
            away4.setEnabled(true);
            away5.setEnabled(true);
            home1.setEnabled(false);
            home2.setEnabled(false);
            home3.setEnabled(false);
            home4.setEnabled(false);
            home5.setEnabled(false);
        }
        buttonSuit.setEnabled(false);
        nextPlayer.setEnabled(false);
    }//GEN-LAST:event_buttonSuitActionPerformed

    private void buttonRestartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRestartActionPerformed
        // TODO add your handling code here:
//        buttonSuit.setEnabled(true);
//        textPlayer.setText("");
//        away1.setEnabled(false);
//        away2.setEnabled(false);
//        away3.setEnabled(false);
//        away4.setEnabled(false);
//        away5.setEnabled(false);
//        home1.setEnabled(false);
//        home2.setEnabled(false);
//        home3.setEnabled(false);
//        home4.setEnabled(false);
//        home5.setEnabled(false);
//        sizeAway1 = 5;
//        sizeAway2 = 5;
//        sizeAway3 = 5;
//        sizeAway4 = 5;
//        sizeAway5 = 5;
//        sizeHome1 = 5;
//        sizeHome2 = 5;
//        sizeHome3 = 5;
//        sizeHome4 = 5;
//        sizeHome5 = 5;
//        scoreHome = 0;
//        scoreAway = 0;
//        away1.setText(String.valueOf(sizeAway1));
//        away2.setText(String.valueOf(sizeAway2));
//        away3.setText(String.valueOf(sizeAway3));
//        away4.setText(String.valueOf(sizeAway4));
//        away5.setText(String.valueOf(sizeAway5));
//        home1.setText(String.valueOf(sizeHome1));
//        home2.setText(String.valueOf(sizeHome2));
//        home3.setText(String.valueOf(sizeHome3));
//        home4.setText(String.valueOf(sizeHome4));
//        home5.setText(String.valueOf(sizeHome5));
//        homeScore.setText(String.valueOf(scoreHome));
//        awayScore.setText(String.valueOf(scoreAway));
//        timerAway(0);
//        timerHome(0);
    }//GEN-LAST:event_buttonRestartActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
//        try{
//            
//            ImageIcon icon;
//            icon = new ImageIcon("/home/sulthan/Downloads/Ellipse8.png");
//            
//            away1.setIcon(icon);
//            away2.setIcon(icon);
//            away3.setIcon(icon);
//            away4.setIcon(icon);
//            away5.setIcon(icon);
//            
//            home1.setIcon(icon);
//            home2.setIcon(icon);
//            home3.setIcon(icon);
//            home4.setIcon(icon);
//            home5.setIcon(icon);
//            
//        }
//        
//        catch (Exception ex){
//            
//        }

        
        away1.setEnabled(false);
        away2.setEnabled(false);
        away3.setEnabled(false);
        away4.setEnabled(false);
        away5.setEnabled(false);
        home1.setEnabled(false);
        home2.setEnabled(false);
        home3.setEnabled(false);
        home4.setEnabled(false);
        home5.setEnabled(false);
        
        
        try{
            ServerSocket ss=new ServerSocket(12345);
            Socket sk=ss.accept();
            BufferedReader br=new BufferedReader(new InputStreamReader(sk.getInputStream()));
            String line = br.readLine();
            if (line.equals("home")) {
                sk.close();
                ss.close();
                terima();
               currentPlayer=1;
                
            }
            else{
                sk.close();
                ss.close();
                setEnableButtonHome();
                currentPlayer=0;
            }
            } catch(Exception e){}
//        kirim("home");
    }//GEN-LAST:event_formWindowOpened

    private void nextPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextPlayerActionPerformed
        // TODO add your handling code here:
        if (currentPlayer == 0) {
          if(statusku % 2 == 0){
                terima();
                statusku++;
                nextPlayer.setEnabled(false);
            }else{
                setEnableButtonHome();
                statusku++;
                nextPlayer.setEnabled(false);
            }
        }else{
            if(statusku % 2 == 0){
                setEnableButtonAway();
                statusku++;
                nextPlayer.setEnabled(false);
            }else{
                terima();
                statusku++;
                nextPlayer.setEnabled(false);
            }
        }
    }//GEN-LAST:event_nextPlayerActionPerformed

  
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Congklak.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Congklak.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Congklak.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Congklak.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Congklak().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton away1;
    private javax.swing.JButton away2;
    private javax.swing.JButton away3;
    private javax.swing.JButton away4;
    private javax.swing.JButton away5;
    private javax.swing.JLabel awayScore;
    private javax.swing.JButton buttonRestart;
    private javax.swing.JButton buttonSuit;
    private javax.swing.JButton home1;
    private javax.swing.JButton home2;
    private javax.swing.JButton home3;
    private javax.swing.JButton home4;
    private javax.swing.JButton home5;
    private javax.swing.JLabel homeScore;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JButton nextPlayer;
    private javax.swing.JLabel textPlayer;
    // End of variables declaration//GEN-END:variables
}
